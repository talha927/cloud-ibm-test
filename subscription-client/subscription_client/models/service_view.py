# coding: utf-8

"""
    Subscription-svc

    Manage subscriptions to services offered  # noqa: E501

    OpenAPI spec version: 0.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from subscription_client.configuration import Configuration


class ServiceView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'billed_by': 'str',
        'external_id': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'billed_by': 'billed_by',
        'external_id': 'external_id',
        'tags': 'tags'
    }

    def __init__(self, id=None, name=None, type=None, billed_by=None, external_id=None, tags=None, _configuration=None):  # noqa: E501
        """ServiceView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._type = None
        self._billed_by = None
        self._external_id = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if billed_by is not None:
            self.billed_by = billed_by
        if external_id is not None:
            self.external_id = external_id
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this ServiceView.  # noqa: E501


        :return: The id of this ServiceView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceView.


        :param id: The id of this ServiceView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceView.  # noqa: E501


        :return: The name of this ServiceView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceView.


        :param name: The name of this ServiceView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ServiceView.  # noqa: E501


        :return: The type of this ServiceView.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceView.


        :param type: The type of this ServiceView.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def billed_by(self):
        """Gets the billed_by of this ServiceView.  # noqa: E501


        :return: The billed_by of this ServiceView.  # noqa: E501
        :rtype: str
        """
        return self._billed_by

    @billed_by.setter
    def billed_by(self, billed_by):
        """Sets the billed_by of this ServiceView.


        :param billed_by: The billed_by of this ServiceView.  # noqa: E501
        :type: str
        """

        self._billed_by = billed_by

    @property
    def external_id(self):
        """Gets the external_id of this ServiceView.  # noqa: E501


        :return: The external_id of this ServiceView.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ServiceView.


        :param external_id: The external_id of this ServiceView.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def tags(self):
        """Gets the tags of this ServiceView.  # noqa: E501


        :return: The tags of this ServiceView.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServiceView.


        :param tags: The tags of this ServiceView.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceView):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Consumption

    Keeps track of the different services being utilized by users  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from consumption_client.configuration import Configuration


class Consumption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'service_id': 'str',
        'user_id': 'str',
        'service_function': 'str',
        'service_type': 'str',
        'resource_id': 'str',
        'resource_type': 'str',
        'cloud_id': 'str',
        'cloud_type': 'str',
        'metadata': 'dict(str, object)'
    }

    attribute_map = {
        'project_id': 'project_id',
        'service_id': 'service_id',
        'user_id': 'user_id',
        'service_function': 'service_function',
        'service_type': 'service_type',
        'resource_id': 'resource_id',
        'resource_type': 'resource_type',
        'cloud_id': 'cloud_id',
        'cloud_type': 'cloud_type',
        'metadata': 'metadata'
    }

    def __init__(self, project_id=None, service_id=None, user_id=None, service_function=None, service_type=None, resource_id=None, resource_type=None, cloud_id=None, cloud_type=None, metadata=None, _configuration=None):  # noqa: E501
        """Consumption - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._project_id = None
        self._service_id = None
        self._user_id = None
        self._service_function = None
        self._service_type = None
        self._resource_id = None
        self._resource_type = None
        self._cloud_id = None
        self._cloud_type = None
        self._metadata = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        self.service_id = service_id
        self.user_id = user_id
        self.service_function = service_function
        self.service_type = service_type
        self.resource_id = resource_id
        self.resource_type = resource_type
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if cloud_type is not None:
            self.cloud_type = cloud_type
        if metadata is not None:
            self.metadata = metadata

    @property
    def project_id(self):
        """Gets the project_id of this Consumption.  # noqa: E501


        :return: The project_id of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Consumption.


        :param project_id: The project_id of this Consumption.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def service_id(self):
        """Gets the service_id of this Consumption.  # noqa: E501


        :return: The service_id of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Consumption.


        :param service_id: The service_id of this Consumption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def user_id(self):
        """Gets the user_id of this Consumption.  # noqa: E501


        :return: The user_id of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Consumption.


        :param user_id: The user_id of this Consumption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def service_function(self):
        """Gets the service_function of this Consumption.  # noqa: E501


        :return: The service_function of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._service_function

    @service_function.setter
    def service_function(self, service_function):
        """Sets the service_function of this Consumption.


        :param service_function: The service_function of this Consumption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and service_function is None:
            raise ValueError("Invalid value for `service_function`, must not be `None`")  # noqa: E501
        allowed_values = ["BACKUP", "CALCULATE", "CREATE", "ENABLE", "DISABLE", "DISCOVER", "MIGRATE", "RESTORE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                service_function not in allowed_values):
            raise ValueError(
                "Invalid value for `service_function` ({0}), must be one of {1}"  # noqa: E501
                .format(service_function, allowed_values)
            )

        self._service_function = service_function

    @property
    def service_type(self):
        """Gets the service_type of this Consumption.  # noqa: E501


        :return: The service_type of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this Consumption.


        :param service_type: The service_type of this Consumption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DRaaS - K8s/OpenShift", "DRaaS - Linux Server", "DRaaS - VPC", "MaaS - Content", "MaaS - Database", "MaaS - VM", "Manage Account - Compliance Policy", "Manage Account - Price Visibility", "Manage Account - VPC", "Manage Account - Cost Optimization"]  # noqa: E501
        if (self._configuration.client_side_validation and
                service_type not in allowed_values):
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def resource_id(self):
        """Gets the resource_id of this Consumption.  # noqa: E501


        :return: The resource_id of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Consumption.


        :param resource_id: The resource_id of this Consumption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this Consumption.  # noqa: E501


        :return: The resource_type of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Consumption.


        :param resource_type: The resource_type of this Consumption.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def cloud_id(self):
        """Gets the cloud_id of this Consumption.  # noqa: E501


        :return: The cloud_id of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this Consumption.


        :param cloud_id: The cloud_id of this Consumption.  # noqa: E501
        :type: str
        """

        self._cloud_id = cloud_id

    @property
    def cloud_type(self):
        """Gets the cloud_type of this Consumption.  # noqa: E501


        :return: The cloud_type of this Consumption.  # noqa: E501
        :rtype: str
        """
        return self._cloud_type

    @cloud_type.setter
    def cloud_type(self, cloud_type):
        """Sets the cloud_type of this Consumption.


        :param cloud_type: The cloud_type of this Consumption.  # noqa: E501
        :type: str
        """
        allowed_values = ["AWS", "GCP", "IBM", "AZURE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                cloud_type not in allowed_values):
            raise ValueError(
                "Invalid value for `cloud_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cloud_type, allowed_values)
            )

        self._cloud_type = cloud_type

    @property
    def metadata(self):
        """Gets the metadata of this Consumption.  # noqa: E501


        :return: The metadata of this Consumption.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Consumption.


        :param metadata: The metadata of this Consumption.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Consumption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Consumption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Consumption):
            return True

        return self.to_dict() != other.to_dict()
